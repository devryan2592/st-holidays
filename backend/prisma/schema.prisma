// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sessions           Session[]
  twoFactorTokens    TwoFactorToken[]
  resetPasswordToken ResetPasswordToken?

  @@index([email])
  @@map("users")
}

model Session {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  lastUsed  DateTime @default(now()) @map("last_used")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Device and IP
  ipAddress  String
  userAgent  String
  deviceType String?

  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at") // This will be used to expire the refresh token

  @@index([refreshToken])
  @@map("sessions")
}

model TwoFactorToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId, expiresAt])
  @@map("two_factor_tokens")
}

model ResetPasswordToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId, expiresAt])
  @@map("reset_password_tokens")
}

model Destination {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  thumbnail   String?
  images      String[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  cities City[]
  tours  Tour[]

  @@map("destinations")
}

model City {
  id            String   @id @default(uuid())
  name          String
  slug          String   @unique
  description   String?
  thumbnail     String?
  images        String[]
  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  tours            Tour[]
  attractions      Attraction[]

  @@unique([destinationId, name])
  @@map("cities")
}

model Tour {
  id             String       @id @default(uuid())
  name           String       @unique
  slug           String       @unique
  description    String
  duration       String
  theme          String?
  packageType    String?
  price          Decimal      @db.Decimal(10, 2)
  offerPrice     Decimal?     @db.Decimal(10, 2)
  thumbnail      String?
  images         String[]
  highlights     String[]
  inclusions     String[]
  exclusions     String[]
  terms          String[]
  destinationId  String
  destination    Destination  @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  cities           City[]
  itinerary        DayItineraryItem[]

  @@map("tours")
}

model Attraction {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  thumbnail   String?
  images      String[]
  cityId      String
  city        City     @relation(fields: [cityId], references: [id])
}

enum Meals {
  BREAKFAST
  LUNCH
  DINNER
}

model DayItineraryItem {
  id          String   @id @default(uuid())
  tourId      String
  tour        Tour     @relation(fields: [tourId], references: [id])
  dayNumber   Int
  title       String
  description String
  images      String[]
  meals       Meals[]
  duration    Int?

  @@unique([tourId, dayNumber])
}
