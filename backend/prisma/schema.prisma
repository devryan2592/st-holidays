// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Destination {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  thumbnail   String?
  images      String[]
  faqs        String[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  cities City[]
  tours  Tour[]

  @@map("destinations")
}

model City {
  id            String      @id @default(uuid())
  name          String
  slug          String      @unique
  description   String?
  thumbnail     String?
  images        String[]
  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  faqs          String[]
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  tours       Tour[]
  attractions Attraction[]

  @@unique([destinationId, name])
  @@map("cities")
}

model Tour {
  id            String      @id @default(uuid())
  name          String      @unique
  slug          String      @unique
  description   String
  featured      Boolean     @default(false)
  duration      Int
  category      String?
  packageType   String?
  price         Decimal     @db.Decimal(10, 2)
  offerPrice    Decimal?    @db.Decimal(10, 2)
  thumbnail     String?
  images        String[]
  highlights    String[]
  inclusions    String[]
  exclusions    String[]
  terms         String[]
  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  cities    City[]
  itinerary DayItineraryItem[]

  @@map("tours")
}

model Attraction {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  duration    Int?
  price       Decimal  @db.Decimal(10, 2)
  offerPrice  Decimal? @db.Decimal(10, 2)
  thumbnail   String?
  images      String[]
  inclusions  String[]
  exclusions  String[]
  terms       String[]
  faqs        String[]
  cityId      String
  city        City     @relation(fields: [cityId], references: [id])
}

enum Meals {
  BREAKFAST
  LUNCH
  DINNER
}

model DayItineraryItem {
  id          String   @id @default(uuid())
  tourId      String
  order       Int
  tour        Tour     @relation(fields: [tourId], references: [id])
  dayNumber   Int
  title       String
  description String
  images      String[]
  meals       Meals[]
  duration    Int?

  @@unique([tourId, dayNumber])
  @@index([order])
}
